pipeline {
    agent any
    environment {
//        registry = "https://hub.docker.com/maven-code-coverage"
        registry = "chakr014/maven-code-coverage"
        registryCredential = "dockerhubcreds"
    }
    tools {
        // Install the Maven version configured as "M3" and add it to the path.
        maven "custom-mvn"
    }
    stages {
        stage('Build') {
            steps {
  //              // Get some code from a GitHub repository
  //              git 'https://github.com/chaitanyaredd/maven-examples.git'
                dir("${env.WORKSPACE}/maven-code-coverage"){
                    sh "mvn clean install"
                }

                // Run Maven on a Unix agent.
                // To run Maven on a Windows agent, use
                // bat "mvn -Dmaven.test.failure.ignore=true clean package"
            }

            post {
                // If Maven was able to run the tests, even if some of the test
                // failed, record the test results and archive the jar file.
                success {
                    junit '**/target/surefire-reports/TEST-*.xml'
                    archiveArtifacts '**/target/*.jar'
                }
            }
        }
        stage('SonarQube analysis') {
            steps {
                // Mention the sonarqube installtion name which is configured in ConfigureSystem
                withSonarQubeEnv('mysonarqube') {
                    // Optionally use a Maven environment you've configured already
                    dir("${env.WORKSPACE}/maven-code-coverage"){
                        sh 'mvn sonar:sonar -Dsonar.projectKey="maven-custom" -Dsonar.projectName="maven-custome"'
                        sh 'sleep 60s'
                    }
                }
            }
        }
        stage("Quality Gate") {
        // Create a webhook in sonarqube
        // Sonarqube --> project --> webhook --> add jenkins url as (http://<jenkins_url>/sonarqube-webhook)
            steps {
                timeout(time: 60, unit: 'SECONDS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        stage("Create docker image") {
            steps {
                dir("${env.WORKSPACE}/maven-code-coverage"){
                     sh 'docker build -t maven-code-coverage:latest .'
                     sh 'docker tag maven-code-coverage:latest chakr014/maven-code-coverage:latest'
/*                     script {
                        docker.build registry + ":BUILD_NUMBER"
                        docker build -t maven-code-coverage:latest */
                     }
                }
            }
        }
        stage("push docker image") {
            steps {
                script {
                    sh 'docker push chakr014/maven-code-coverage:latest'
/*                    docker.withRegistry( '',registryCredential ){
                        dockerImage.push() */
                    }
                }
            }
        }
    }
}
